<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>lumen重写validationException</title>
      <link href="/2018/07/22/lumen%E9%87%8D%E5%86%99validation%E5%BC%82%E5%B8%B8/"/>
      <url>/2018/07/22/lumen%E9%87%8D%E5%86%99validation%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">throwValidationException</span><span class="params">(Request $request, $validator)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $response = [</span><br><span class="line">        <span class="string">'code'</span> =&gt; <span class="number">400</span>,</span><br><span class="line">        <span class="string">'msg'</span> =&gt; $validator-&gt;errors()-&gt;first(),</span><br><span class="line">        <span class="string">'data'</span> =&gt; []</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ValidationException($validator, $response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> lumen </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lumen </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker安装</title>
      <link href="/2018/07/21/docker%E5%AE%89%E8%A3%85/"/>
      <url>/2018/07/21/docker%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<ol><li>使用 root 权限登录 Centos。确保 yum 包更新到最新。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>卸载旧版本(如果安装过旧版本的话)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="3"><li>安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>设置yum源<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    sudo yum-config-manager –add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">``` </span><br><span class="line">        </span><br><span class="line">5. 可以查看所有仓库中所有docker版本，并选择特定版本安装</span><br><span class="line">```bash</span><br><span class="line">   yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li>安装docker <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce <span class="comment">#由于repo中默认只开启stable仓库，故这里安装的是最新稳定版18.03.1-ce</span></span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>设置开机启动(option)</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker &amp;&amp; sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p><em>如果没设置开启启动请自行启动 [root@VM_4_202_centos ~]# service docker start</em></p></li><li><p>验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</p><pre><code class="bash">docker version</code></pre><h6 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a><a href="https://github.com/charleskun/DockerFilesForPhpDev" target="_blank" rel="noopener">Dockerfile</a></h6></li></ol>]]></content>
      
      <categories>
          
          <category> docker安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql 数据使用logstash 导入elasticsearch</title>
      <link href="/2018/06/18/mysql-%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8logstash-%E5%AF%BC%E5%85%A5elasticsearch/"/>
      <url>/2018/06/18/mysql-%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8logstash-%E5%AF%BC%E5%85%A5elasticsearch/</url>
      <content type="html"><![CDATA[<ol><li>安装logstash插件logstash-input-jdbc<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash-plug install --no-verify logstash-input-jdbc</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li>配置文件<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  jdbc &#123;</span><br><span class="line">    #驱动绝对路径</span><br><span class="line">    jdbc_driver_library =&gt; "/root/mysql-connector-java-5.1.43-bin.jar"</span><br><span class="line">    #驱动类名</span><br><span class="line">    jdbc_driver_class =&gt; "com.mysql.jdbc.Driver"</span><br><span class="line">    #连接池配置, mysql数据库连接 DAHLIA 为数据库名</span><br><span class="line">    jdbc_connection_string =&gt; "jdbc:mysql://xxxxx:3306/DAHLIA"</span><br><span class="line">    #连接池配置, 使用前是否验证连接</span><br><span class="line">    jdbc_validate_connection =&gt; true</span><br><span class="line">    #连接池配置, 数据库用户名</span><br><span class="line">    jdbc_user =&gt; "foo"</span><br><span class="line">    #连接池配置, 数据库密码</span><br><span class="line">    jdbc_password =&gt; "bar"</span><br><span class="line">    #连接池配置, 是否启用分页, 启用后,需要使用 jdbc_page_size 设置每次查询的结果集大小</span><br><span class="line">    jdbc_paging_enabled =&gt; true</span><br><span class="line">    #连接池配置, 每次查询的结果集大小, 必须设置 jdbc_paging_enabled 为 true 才有效</span><br><span class="line">    jdbc_page_size =&gt; "1000"</span><br><span class="line">    #查询结果集的语句</span><br><span class="line">    statement =&gt; "select * from tablename where update_time &gt;:sql_last_value"</span><br><span class="line">    #使用增量列值,而不是时间戳; 默认值为false</span><br><span class="line">    #use_column_value =&gt; true</span><br><span class="line">    #当设置 use_column_value 为true时(不跟踪时间戳查询), 将跟踪此列值</span><br><span class="line">    #tracking_column =&gt; "update_time"</span><br><span class="line">    #不设置时,默认值为 numeric; 可选 numeric, timestamp</span><br><span class="line">    tracking_column_type =&gt; "numeric"</span><br><span class="line">    #每分钟执行一次</span><br><span class="line">    schedule =&gt; "* * * * *"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        #删除默认message字段</span><br><span class="line">        remove_field =&gt; ["@version"]</span><br><span class="line">        #把数据写入到 source 字段</span><br><span class="line">        source =&gt; "message"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; ["127.0.0.1:9200"]</span><br><span class="line">        user =&gt; "foo"</span><br><span class="line">        password =&gt; "bar"</span><br><span class="line">        index =&gt; "news_info_shadow"</span><br><span class="line">        document_id =&gt; "%&#123;id&#125;"</span><br><span class="line">    &#125;</span><br><span class="line">    stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>statement 参数可以替换为statement_filepath,从文件中执行sql查询;<a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html#_configuring_sql_statement" target="_blank" rel="noopener">参照</a></li><li>本机启动多个logstash时,需要path.data 参数</li><li>logstash –path.data /path/to -f path/to/shipper.conf</li><li>jdbc_paging_enabled   jdbc_page_size 控制是否开启查询分页, 及分页大小; 默认100000, 根据机器内存抉择</li></ul><ol start="3"><li><p>定时增量导入<a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html#_scheduling" target="_blank" rel="noopener">inputscheduling参数</a><br> 增量更新原理:把mysql的id 设为 es _id; 根据 sql_last_value 查出需要更新的数据,<br> 如果 _id 存在则更新,不存在则新增<br> 注意:</p><blockquote><p>se_column_value =&gt; false  时, 才可以跟踪时间戳</p></blockquote><p> <a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html" target="_blank" rel="noopener">官方文档</a>里的参数还是要仔细看的<br> 发现网上有些文章, 在没有设置 use_column_value 为true的情况下 指定 tracking_column 为某个列值,<br> 根据官方文档的说明,这样设置并没有什么卵用.</p></li><li><p>使用 ruby filter 对字符进行转码</p><figure class="highlight javascript"><figcaption><span>1.8</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    ruby &#123;</span><br><span class="line">        init =&gt; <span class="string">"require 'iconv'"</span></span><br><span class="line">        code =&gt; <span class="string">"</span></span><br><span class="line"><span class="string">            row = event.get('title')</span></span><br><span class="line"><span class="string">            #row = row.encoding.name</span></span><br><span class="line"><span class="string">            ic = Iconv.new('UTF-8', 'GBK')</span></span><br><span class="line"><span class="string">            row = ic.iconv(row)</span></span><br><span class="line"><span class="string">            event.set('test-covert', row)</span></span><br><span class="line"><span class="string">        "</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用ik对title进行分词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PUT /news_info_shadow</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;_default_&quot; : &#123;</span><br><span class="line">      &quot;_all&quot; : &#123;</span><br><span class="line">        &quot;enabled&quot; : false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;participle&quot;: &#123;</span><br><span class="line">      &quot;dynamic&quot; : true,</span><br><span class="line">      &quot;properties&quot; : &#123;</span><br><span class="line">        &quot;id&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;long&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;title&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">分词插件ik</a></p><ul><li>配置说明:<br>创建一个名叫 news_info_shadow 的索引，分词器用 ik_smart，并创建一个 participle 的类型，里面有一个 title 的字段，指定其使用 ik_max_word 分词器</li></ul>]]></content>
      
      <categories>
          
          <category> elk使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es </tag>
            
            <tag> logstash </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>lumen&amp;laravel使用Repositories</title>
      <link href="/2018/05/14/lumen-laravel%E6%80%BB%E7%BB%93/"/>
      <url>/2018/05/14/lumen-laravel%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<ol><li>composer require “bosnadev/repositories: 0.*”</li><li>composer update</li><li>创建repository类,继承Bosnadev\Repositories\Eloquent\Repository并实现model()方法.<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Bosnadev</span>\<span class="title">Repositories</span>\<span class="title">Contracts</span>\<span class="title">RepositoryInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Bosnadev</span>\<span class="title">Repositories</span>\<span class="title">Eloquent</span>\<span class="title">Repository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilmsRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">model</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'App\Film'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="4"><li><p>创建model</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Film</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $primaryKey = <span class="string">'film_id'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $table = <span class="string">'film'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $casts = [</span><br><span class="line">        <span class="string">"rental_rate"</span>       =&gt; <span class="string">'float'</span></span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在c层使用(注入)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">FilmsRepository</span> <span class="title">as</span> <span class="title">Film</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilmsController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $film;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Film $film)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;film = $film;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> \Response::json(<span class="keyword">$this</span>-&gt;film-&gt;all());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>####<a href="https://github.com/bosnadev/repository" target="_blank" rel="noopener">参考github地址</a></p>]]></content>
      
      <categories>
          
          <category> lumen踩过的坑 </category>
          
          <category> lumen中使用Repositories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lumen </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>luemn中使用全局helper</title>
      <link href="/2018/03/13/luemn%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%A8%E5%B1%80helper/"/>
      <url>/2018/03/13/luemn%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%A8%E5%B1%80helper/</url>
      <content type="html"><![CDATA[<ol><li>在composer.json中autoload节点下追加</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"files": [</span><br><span class="line">    <span class="string">"app/Helper/helper.php"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="2"><li>运行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer dump-autoload</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> lumen </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>lumen使用Eloquent的技巧.md</title>
      <link href="/2018/02/11/lumen%E4%BD%BF%E7%94%A8Eloquent%E7%9A%84%E6%8A%80%E5%B7%A7/"/>
      <url>/2018/02/11/lumen%E4%BD%BF%E7%94%A8Eloquent%E7%9A%84%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<ol><li>increment() or decrement()<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Instead of this:</span></span><br><span class="line">$article = Article::find($article_id);</span><br><span class="line">$article-&gt;read_count++;</span><br><span class="line">$article-&gt;save();</span><br><span class="line"><span class="comment">//you can do this</span></span><br><span class="line">$article = Article::find($article_id);</span><br><span class="line">$article-&gt;increment(<span class="string">'read_count'</span>);</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p>findOrFail()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user = User::findOrFail($id); <span class="comment">//throw modelnotfound exception</span></span><br></pre></td></tr></table></figure></li><li><p>firstOrCreate()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bad demo</span></span><br><span class="line">$user = User::where(<span class="string">'email'</span>, $email)-&gt;first();</span><br><span class="line"><span class="keyword">if</span> (!$user) &#123;</span><br><span class="line">  User::create([</span><br><span class="line">    <span class="string">'email'</span> =&gt; $email</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//you can do this</span></span><br><span class="line">$user = User::firstOrCreate([<span class="string">'email'</span> =&gt; $email]);</span><br></pre></td></tr></table></figure></li><li><p>model中boot()方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::boot();</span><br><span class="line">        <span class="keyword">static</span>::updating(<span class="function"><span class="keyword">function</span><span class="params">($model)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">// do some logging</span></span><br><span class="line">            <span class="comment">// override some property like $model-&gt;something = transform($something);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//假设我们要生成uuid字段</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">parent</span>::boot();</span><br><span class="line">  <span class="keyword">self</span>::creating(<span class="function"><span class="keyword">function</span> <span class="params">($model)</span> </span>&#123;</span><br><span class="line">    $model-&gt;uuid = (string)Uuid::generate();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在定义模型关系的时候可以添加where等条件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">approvedUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(<span class="string">'App\User'</span>)-&gt;where(<span class="string">'approved'</span>, <span class="number">1</span>)-&gt;orderBy(<span class="string">'email'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>模型的默认参数列表</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $table = <span class="string">'users'</span>;</span><br><span class="line">    <span class="keyword">protected</span> $fillable = [<span class="string">'email'</span>, <span class="string">'password'</span>]; <span class="comment">// which fields can be filled with User::create()</span></span><br><span class="line">    <span class="keyword">protected</span> $dates = [<span class="string">'created_at'</span>, <span class="string">'deleted_at'</span>]; <span class="comment">// which fields will be Carbon-ized</span></span><br><span class="line">    <span class="keyword">protected</span> $appends = [<span class="string">'field1'</span>, <span class="string">'field2'</span>]; <span class="comment">// additional values returned in JSON</span></span><br><span class="line">    <span class="keyword">protected</span> $primaryKey = <span class="string">'uuid'</span>; <span class="comment">// it doesn't have to be "id"</span></span><br><span class="line">    <span class="keyword">public</span> $incrementing = <span class="keyword">false</span>; <span class="comment">// and it doesn't even have to be auto-incrementing!</span></span><br><span class="line">    <span class="keyword">protected</span> $perPage = <span class="number">25</span>; <span class="comment">// Yes, you can override pagination count PER MODEL (default 15)</span></span><br><span class="line">    <span class="keyword">const</span> CREATED_AT = <span class="string">'created_at'</span>;</span><br><span class="line">    <span class="keyword">const</span> UPDATED_AT = <span class="string">'updated_at'</span>; <span class="comment">// Yes, even those names can be overridden</span></span><br><span class="line">    <span class="keyword">public</span> $timestamps = <span class="keyword">false</span>; <span class="comment">// or even not used at all</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更优雅的where</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bad demo</span></span><br><span class="line">$users = User::where(<span class="string">'approved'</span>, <span class="number">1</span>)-&gt;get();</span><br><span class="line"><span class="comment">//you can do this</span></span><br><span class="line">$users = User::whereApproved(<span class="number">1</span>)-&gt;get();</span><br></pre></td></tr></table></figure></li><li><p>排序问题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//您有论坛主题但想通过最新帖子订购，</span></span><br><span class="line"><span class="comment">//该怎么办？顶部有最新更新主题的论坛中非常常见的要求</span></span><br><span class="line"><span class="comment">//首先定义关系</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">latestPost</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(\App\Post::class)-&gt;latest();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后，在我们的控制器中，我们可以做到</span></span><br><span class="line">$users = Topic::with(<span class="string">'latestPost'</span>)-&gt;get()-&gt;sortByDesc(<span class="string">'latestPost.created_at'</span>);</span><br></pre></td></tr></table></figure></li><li><p>优雅的使用when 而不再使用if else</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bad demo </span></span><br><span class="line"><span class="keyword">if</span> (request(<span class="string">'filter_by'</span>) == <span class="string">'likes'</span>) &#123;</span><br><span class="line">    $query-&gt;where(<span class="string">'likes'</span>, <span class="string">'&gt;'</span>, request(<span class="string">'likes_amount'</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (request(<span class="string">'filter_by'</span>) == <span class="string">'date'</span>) &#123;</span><br><span class="line">    $query-&gt;orderBy(<span class="string">'created_at'</span>, request(<span class="string">'ordering_rule'</span>, <span class="string">'desc'</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//you can do this</span></span><br><span class="line">$query = Author::query();</span><br><span class="line">$query-&gt;when(request(<span class="string">'filter_by'</span>) == <span class="string">'likes'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $q-&gt;where(<span class="string">'likes'</span>, <span class="string">'&gt;'</span>, request(<span class="string">'likes_amount'</span>, <span class="number">0</span>));</span><br><span class="line">&#125;);</span><br><span class="line">$query-&gt;when(request(<span class="string">'filter_by'</span>) == <span class="string">'date'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $q-&gt;orderBy(<span class="string">'created_at'</span>, request(<span class="string">'ordering_rule'</span>, <span class="string">'desc'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//还可以这样玩</span></span><br><span class="line">$query = User::query();</span><br><span class="line">$query-&gt;when(request(<span class="string">'role'</span>, <span class="keyword">false</span>), <span class="function"><span class="keyword">function</span> <span class="params">($q, $role)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> $q-&gt;where(<span class="string">'role_id'</span>, $role);</span><br><span class="line">&#125;);</span><br><span class="line">$authors = $query-&gt;get();</span><br></pre></td></tr></table></figure></li><li><p>blade模板使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设post属于Author，然后是Blade代码：</span></span><br><span class="line">&#123;&#123; $post-&gt;author-&gt;name &#125;&#125;</span><br><span class="line"><span class="comment">//假设现在作者删除了</span></span><br><span class="line">&#123;&#123; $post-&gt;author-&gt;name ?? <span class="string">''</span> &#125;&#125;</span><br><span class="line"><span class="comment">//可以使用eloquent来控制</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">author</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(<span class="string">'App\Author'</span>)-&gt;withDefault();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在此示例中，如果没有作者附加到帖子，则author()关系将返回空App\Author模型。</span></span><br><span class="line"><span class="comment">//此外，我们可以将默认属性值分配给该默认模型。</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">author</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(<span class="string">'App\Author'</span>)-&gt;withDefault([</span><br><span class="line">          <span class="string">'name'</span> =&gt; <span class="string">'Guest Author'</span></span><br><span class="line">      ]);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>eloquent中使用原生sql</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// whereRaw</span></span><br><span class="line">$orders = DB::table(<span class="string">'orders'</span>)</span><br><span class="line">    -&gt;whereRaw(<span class="string">'price &gt; IF(state = "TX", ?, 100)'</span>, [<span class="number">200</span>])</span><br><span class="line">    -&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// havingRaw</span></span><br><span class="line">Product::groupBy(<span class="string">'category_id'</span>)-&gt;havingRaw(<span class="string">'COUNT(*) &gt; 1'</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// orderByRaw</span></span><br><span class="line">User::where(<span class="string">'created_at'</span>, <span class="string">'&gt;'</span>, <span class="string">'2016-01-01'</span>)</span><br><span class="line">  -&gt;orderByRaw(<span class="string">'(updated_at - created_at) desc'</span>)</span><br><span class="line">  -&gt;get();</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> eloquent技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lumen </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
